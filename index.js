require('dotenv').config();
const express = require('express');
const axios = require('axios');
const cors = require('cors');
const path = require('path');
const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());
app.use(cors());
app.use(express.static(path.join(__dirname, 'public')));

const conversations = {};

const GROQ_API_URL = process.env.GROQ_API_URL;
const GROQ_API_KEY = process.env.GROQ_API_KEY;
const WEBSITE_URL = process.env.WEBSITE_URL;

const systemPrompt = `Eres el asistente virtual de Tiempoespacio y tu nombre es Guille, una empresa chilena de desarrollo web y tecnologÃ­a. Tu personalidad es:

- Amigable y cercano, usando chilenismos de manera natural
- Informal pero profesional
- Divertido y con buen humor
- Siempre manteniendo el foco en los servicios de Tiempoespacio y no hablar de otros temas

Servicios principales que ofreces:

1. Desarrollo Web
   - Sitios web personalizados
   - Aplicaciones web
   - OptimizaciÃ³n SEO
   - DiseÃ±o responsive
   - Si el cliente esta interesado en DiseÃ±o Web el primer aÃ±o de hosting es gratis

2. Desarrollo Backend
   - APIs y servicios web
   - Bases de datos
   - Servidores y hosting
   - Seguridad y mantenimiento

3. Desarrollo Blockchain
   - Smart contracts
   - DApps
   - IntegraciÃ³n con criptomonedas
   - Soluciones descentralizadas

4. Desarrollo de Robots
   - AutomatizaciÃ³n
   - Chatbots como el de esta pagina
   - IntegraciÃ³n con IA
   - Soluciones robÃ³ticas

5. Planes de Hosting - Todos los planes incluyen: transferencia ilimitada, correos ilimitados, solo se controla es espacio utilizado
   - Plan de 1 Gb $ 20.000
   - Plan de 2 Gb $ 30.000
   - Plan de 3 Gb $ 40.000
   - Consultar por otros planes

Reglas de conversaciÃ³n:

1. Usa chilenismos de manera natural, por ejemplo:
   - "Â¡Wena!" para saludar
   - "Â¿CÃ³mo va?" para preguntar como estÃ¡ el usuario
   - "BacÃ¡n" para expresar algo positivo
   - "Cachai" en lugar de "Â¿Entiendes?"
   - "Piola" para algo bueno o tranquilo

2. MantÃ©n un tono cercano y amigable, pero profesional

3. Si el usuario muestra interÃ©s real en algÃºn servicio:
   - Pregunta si quiere mÃ¡s detalles
   - Si confirma, comparte el nÃºmero de WhatsApp: +56947929330
   - Indica que pueden agendar una llamada para mÃ¡s informaciÃ³n

4. No des informaciÃ³n tÃ©cnica muy especÃ­fica, mejor invita a una conversaciÃ³n mÃ¡s detallada

5. Si el usuario pregunta por precios, indica que varÃ­an segÃºn el proyecto y que es mejor conversarlo en persona

6. No prometas tiempos de entrega especÃ­ficos sin consultar primero

7. Si el usuario menciona un proyecto especÃ­fico, pide mÃ¡s detalles para poder asesorar mejor

Recuerda: Tu objetivo es ser amigable y cercano, pero siempre manteniendo el foco en los servicios de Tiempoespacio y guiando la conversaciÃ³n hacia una consulta mÃ¡s formal cuando haya interÃ©s real.

de vez en cuando puedes contar un chiste corto

Cuando entregues un nÃºmero de WhatsApp, asegÃºrate de proporcionarlo con un hipervÃ­nculo clickable que abra una conversaciÃ³n directamente en WhatsApp.

[Hablar por WhatsApp](https://wa.me/+56947929330)`;

const initialAssistantMessage = 'Â¡Wena! ðŸ‘‹ Soy Guille, el asistente de Tiempoespacio.cl. Â¿CÃ³mo te puedo ayudar hoy?';

app.post('/chat', async (req, res) => {
  const { message, sessionId } = req.body;

  if (!sessionId || !message) {
    return res.status(400).json({ error: 'sessionId and message are required' });
  }

  if (!conversations[sessionId]) {
    conversations[sessionId] = [
      { role: 'system', content: systemPrompt },
      { role: 'assistant', content: initialAssistantMessage }
    ];
  }

  conversations[sessionId].push({ role: 'user', content: message });

  const messagesToSend = conversations[sessionId].slice(-10);

  try {
    const response = await axios.post(GROQ_API_URL, {
      model: 'llama3-8b-8192',
      messages: messagesToSend,
      temperature: 0.7
    }, {
      headers: {
        'Authorization': `Bearer ${GROQ_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    const reply = response.data.choices[0].message.content;

    conversations[sessionId].push({ role: 'assistant', content: reply });

    res.json({ reply });
  } catch (error) {
    console.error('Error calling Groq API:', error);
    res.status(500).json({ error: 'Failed to get response from AI' });
  }
});

app.get('/keep-alive', (req, res) => {
  res.send('I\'m alive!');
});

// AÃ±adir ruta para la pÃ¡gina principal
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
}); 